{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashuj\\\\Desktop\\\\react-portfolio\\\\src\\\\components\\\\themeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create context with default values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: 'light',\n  toggleTheme: () => {}\n});\n\n// Create the provider component\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize theme state\n  const [theme, setTheme] = useState('light');\n\n  // Effect to load saved theme on initial render\n  useEffect(() => {\n    // Check for saved theme in localStorage\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      // Use saved theme if available\n      setTheme(savedTheme);\n      document.documentElement.setAttribute('data-theme', savedTheme);\n    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      // Fallback to system preference if no saved theme\n      setTheme('dark');\n      document.documentElement.setAttribute('data-theme', 'dark');\n    }\n\n    // Log for debugging\n    console.log('Initial theme set to:', savedTheme || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'));\n  }, []);\n\n  // Function to toggle between light and dark themes\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n    console.log('Theme toggled to:', newTheme); // Debug log\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"Z8UCD9KudyQA62DCQ9e5cf9+m5k=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","ThemeProvider","children","_s","setTheme","savedTheme","localStorage","getItem","document","documentElement","setAttribute","window","matchMedia","matches","console","log","newTheme","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ashuj/Desktop/react-portfolio/src/components/themeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Create context with default values\nexport const ThemeContext = createContext({\n  theme: 'light',\n  toggleTheme: () => {}\n});\n\n// Create the provider component\nexport const ThemeProvider = ({ children }) => {\n  // Initialize theme state\n  const [theme, setTheme] = useState('light');\n\n  // Effect to load saved theme on initial render\n  useEffect(() => {\n    // Check for saved theme in localStorage\n    const savedTheme = localStorage.getItem('theme');\n    \n    if (savedTheme) {\n      // Use saved theme if available\n      setTheme(savedTheme);\n      document.documentElement.setAttribute('data-theme', savedTheme);\n    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      // Fallback to system preference if no saved theme\n      setTheme('dark');\n      document.documentElement.setAttribute('data-theme', 'dark');\n    }\n    \n    // Log for debugging\n    console.log('Initial theme set to:', savedTheme || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'));\n  }, []);\n\n  // Function to toggle between light and dark themes\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n    console.log('Theme toggled to:', newTheme); // Debug log\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC;EACxCM,KAAK,EAAE,OAAO;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACJ,KAAK,EAAEK,QAAQ,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEhD,IAAIF,UAAU,EAAE;MACd;MACAD,QAAQ,CAACC,UAAU,CAAC;MACpBG,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEL,UAAU,CAAC;IACjE,CAAC,MAAM,IAAIM,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MACzF;MACAT,QAAQ,CAAC,MAAM,CAAC;MAChBI,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAE,MAAM,CAAC;IAC7D;;IAEA;IACAI,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEV,UAAU,KAAKM,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;EACzJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMb,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMgB,QAAQ,GAAGjB,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDK,QAAQ,CAACY,QAAQ,CAAC;IAClBV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;IACvCR,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEM,QAAQ,CAAC;IAC7DF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,QAAQ,CAAC,CAAC,CAAC;EAC9C,CAAC;EAED,oBACEnB,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,KAAK;MAAEC;IAAY,CAAE;IAAAE,QAAA,EAClDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACpB,EAAA,CArCWF,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AAuC1B,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}