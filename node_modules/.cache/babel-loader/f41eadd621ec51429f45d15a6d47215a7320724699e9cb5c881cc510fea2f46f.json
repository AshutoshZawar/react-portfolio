{"ast":null,"code":"// utils/emailService.js\nimport emailjs from '@emailjs/browser';\n\n// EmailJS configuration from environment variables\nconst EMAILJS_CONFIG = {\n  SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID,\n  TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID,\n  PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY\n};\n\n// Initialize EmailJS - call this once when app starts\nexport const initEmailJS = () => {\n  if (EMAILJS_CONFIG.PUBLIC_KEY) {\n    emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\n    console.log('✅ EmailJS initialized successfully');\n    console.log('📧 Service ID:', EMAILJS_CONFIG.SERVICE_ID);\n    console.log('📄 Template ID:', EMAILJS_CONFIG.TEMPLATE_ID);\n  } else {\n    console.error('❌ EmailJS PUBLIC_KEY not found. Check your .env file.');\n  }\n};\n\n// Validate EmailJS configuration\nconst validateConfig = () => {\n  const missing = [];\n  if (!EMAILJS_CONFIG.SERVICE_ID) missing.push('REACT_APP_EMAILJS_SERVICE_ID');\n  if (!EMAILJS_CONFIG.TEMPLATE_ID) missing.push('REACT_APP_EMAILJS_TEMPLATE_ID');\n  if (!EMAILJS_CONFIG.PUBLIC_KEY) missing.push('REACT_APP_EMAILJS_PUBLIC_KEY');\n  if (missing.length > 0) {\n    throw new Error(`Missing environment variables: ${missing.join(', ')}`);\n  }\n};\n\n// Main function to send emails\nexport const sendEmail = async templateParams => {\n  try {\n    // Validate configuration\n    validateConfig();\n\n    // Add timestamp to the email\n    const emailParams = {\n      ...templateParams,\n      sent_time: new Date().toLocaleString('en-US', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZoneName: 'short'\n      })\n    };\n    console.log('📧 Sending email with EmailJS...');\n    console.log('📋 Template params:', emailParams);\n\n    // Send email using EmailJS\n    const response = await emailjs.send(EMAILJS_CONFIG.SERVICE_ID, EMAILJS_CONFIG.TEMPLATE_ID, emailParams, EMAILJS_CONFIG.PUBLIC_KEY);\n    console.log('✅ Email sent successfully!', response);\n    return {\n      success: true,\n      data: response,\n      message: 'Email sent successfully!'\n    };\n  } catch (error) {\n    var _error$message, _error$text;\n    console.error('❌ EmailJS Error:', error);\n\n    // Provide user-friendly error messages\n    let errorMessage = 'Failed to send email. Please try again.';\n    if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('Missing environment variables')) {\n      errorMessage = 'Email service configuration error. Please contact support.';\n    } else if (error.status === 422) {\n      errorMessage = 'Invalid email format. Please check your email address.';\n    } else if (error.status === 400) {\n      errorMessage = 'Please fill in all required fields correctly.';\n    } else if (error.status === 403) {\n      errorMessage = 'Email service temporarily unavailable. Please try again later.';\n    } else if ((_error$text = error.text) !== null && _error$text !== void 0 && _error$text.includes('rate limit')) {\n      errorMessage = 'Too many emails sent. Please wait a moment and try again.';\n    }\n    return {\n      success: false,\n      error: errorMessage,\n      details: error.message\n    };\n  }\n};\n\n// Test function for development\nexport const sendTestEmail = async () => {\n  console.log('🧪 Sending test email...');\n  const testParams = {\n    from_name: 'Test User',\n    from_email: 'test@example.com',\n    message: 'This is a test email from your portfolio! If you receive this, EmailJS is working correctly. 🎉'\n  };\n  return await sendEmail(testParams);\n};","map":{"version":3,"names":["emailjs","EMAILJS_CONFIG","SERVICE_ID","process","env","REACT_APP_EMAILJS_SERVICE_ID","TEMPLATE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","PUBLIC_KEY","REACT_APP_EMAILJS_PUBLIC_KEY","initEmailJS","init","console","log","error","validateConfig","missing","push","length","Error","join","sendEmail","templateParams","emailParams","sent_time","Date","toLocaleString","weekday","year","month","day","hour","minute","timeZoneName","response","send","success","data","message","_error$message","_error$text","errorMessage","includes","status","text","details","sendTestEmail","testParams","from_name","from_email"],"sources":["C:/Users/ashuj/Desktop/ash-portfolio/src/utils/emailService.js"],"sourcesContent":["// utils/emailService.js\nimport emailjs from '@emailjs/browser';\n\n// EmailJS configuration from environment variables\nconst EMAILJS_CONFIG = {\n  SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID,\n  TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID,\n  PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY\n};\n\n// Initialize EmailJS - call this once when app starts\nexport const initEmailJS = () => {\n  if (EMAILJS_CONFIG.PUBLIC_KEY) {\n    emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\n    console.log('✅ EmailJS initialized successfully');\n    console.log('📧 Service ID:', EMAILJS_CONFIG.SERVICE_ID);\n    console.log('📄 Template ID:', EMAILJS_CONFIG.TEMPLATE_ID);\n  } else {\n    console.error('❌ EmailJS PUBLIC_KEY not found. Check your .env file.');\n  }\n};\n\n// Validate EmailJS configuration\nconst validateConfig = () => {\n  const missing = [];\n  if (!EMAILJS_CONFIG.SERVICE_ID) missing.push('REACT_APP_EMAILJS_SERVICE_ID');\n  if (!EMAILJS_CONFIG.TEMPLATE_ID) missing.push('REACT_APP_EMAILJS_TEMPLATE_ID');\n  if (!EMAILJS_CONFIG.PUBLIC_KEY) missing.push('REACT_APP_EMAILJS_PUBLIC_KEY');\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing environment variables: ${missing.join(', ')}`);\n  }\n};\n\n// Main function to send emails\nexport const sendEmail = async (templateParams) => {\n  try {\n    // Validate configuration\n    validateConfig();\n    \n    // Add timestamp to the email\n    const emailParams = {\n      ...templateParams,\n      sent_time: new Date().toLocaleString('en-US', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZoneName: 'short'\n      })\n    };\n    \n    console.log('📧 Sending email with EmailJS...');\n    console.log('📋 Template params:', emailParams);\n    \n    // Send email using EmailJS\n    const response = await emailjs.send(\n      EMAILJS_CONFIG.SERVICE_ID,\n      EMAILJS_CONFIG.TEMPLATE_ID,\n      emailParams,\n      EMAILJS_CONFIG.PUBLIC_KEY\n    );\n    \n    console.log('✅ Email sent successfully!', response);\n    return { \n      success: true, \n      data: response,\n      message: 'Email sent successfully!' \n    };\n    \n  } catch (error) {\n    console.error('❌ EmailJS Error:', error);\n    \n    // Provide user-friendly error messages\n    let errorMessage = 'Failed to send email. Please try again.';\n    \n    if (error.message?.includes('Missing environment variables')) {\n      errorMessage = 'Email service configuration error. Please contact support.';\n    } else if (error.status === 422) {\n      errorMessage = 'Invalid email format. Please check your email address.';\n    } else if (error.status === 400) {\n      errorMessage = 'Please fill in all required fields correctly.';\n    } else if (error.status === 403) {\n      errorMessage = 'Email service temporarily unavailable. Please try again later.';\n    } else if (error.text?.includes('rate limit')) {\n      errorMessage = 'Too many emails sent. Please wait a moment and try again.';\n    }\n    \n    return { \n      success: false, \n      error: errorMessage,\n      details: error.message \n    };\n  }\n};\n\n// Test function for development\nexport const sendTestEmail = async () => {\n  console.log('🧪 Sending test email...');\n  \n  const testParams = {\n    from_name: 'Test User',\n    from_email: 'test@example.com',\n    message: 'This is a test email from your portfolio! If you receive this, EmailJS is working correctly. 🎉'\n  };\n  \n  return await sendEmail(testParams);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}